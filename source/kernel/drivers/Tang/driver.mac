	; Device-based driver for the Tang Nano 20k interface for Nextor
	;
	; Version by Luis Antoniosi
	; Based on version 0.1 by Konamiman

	org 4100h

DRV_START:

	.print1 MSX Tang uSD Driver

;-----------------------------------------------------------------------------
;
; Driver configuration constants
;

;Driver type:
;   0 for drive-based
;   1 for device-based

DRV_TYPE	equ	1

;Hot-plug devices support (device-based drivers only):
;   0 for no hot-plug support
;   1 for hot-plug support

DRV_HOTPLUG	equ	0

DEBUG	equ	0	;Set to 1 for debugging, 0 to normal operation

;Driver version

VER_MAIN	equ	1
VER_SEC		equ	0
VER_REV		equ	0


;-----------------------------------------------------------------------------
;
; SD Controller registers and bit definitions

SDC_ENABLE  	equ 7E00h		 		; wo: 1: enable SDC register, 0: disable
SDC_CMD			equ SDC_ENABLE+1 		; wo: cmd to SDC fpga: 1=read, 2=write
SDC_STATUS		equ SDC_CMD+1	 		; ro: SDC status bits
SDC_SADDR		equ SDC_STATUS+1	 	; wo: 4 bytes: sector addr for read/write
SDC_C_SIZE  	equ SDC_SADDR+4			; ro: 3 bytes: device size blocks
SDC_C_SIZE_MULT	equ SDC_C_SIZE+3		; ro: 3 bits size multiplier
SDC_RD_BL_LEN	equ SDC_C_SIZE_MULT+1	; ro: 4 bits block length
SDC_CTYPE		equ SDC_RD_BL_LEN+1		; ro: SDC Card type: 0=unknown, 1=SDv1, 2=SDv2, 3=SDHCv2 
SDC_MID			equ SDC_CTYPE+1
SDC_OID			equ SDC_MID+1
SDC_PNM			equ SDC_OID+2
SDC_PSN			equ SDC_PNM+5
SDC_CRC16		equ SDC_PSN+4

SDC_SDATA		equ 7C00h		 		; rw: 7C00h-7Dff - sector transfer area

SDC_BUSY		equ 080h
SDC_CRC			equ 001h
SDC_TIMEOUT		equ 002h

SDC_READ		equ 001h
SDC_WRITE		equ 002h
SDC_INIT		equ 080h
;-----------------------------------------------------------------------------
;
; Standard BIOS and work area entries

CHPUT	equ	00A2h	;Character output
CHGET	equ	009Fh
INITXT	equ 006Ch
CLS		equ 0848H
MSXVER	equ 002DH

LINL40	equ 0F3AEh		; Width
LINLEN	equ 0F3B0h
;-----------------------------------------------------------------------------
;
; Work area definition
;
;+0-3: Device size in sectors
;+4-7: current sector r/w
;-----------------------------------------------------------------------------
;
; Error codes for DEV_RW and DEV_FORMAT
;

.NCOMP	equ	0FFh
.WRERR	equ	0FEh
.DISK	equ	0FDh
.NRDY	equ	0FCh
.DATA	equ	0FAh
.RNF	equ	0F9h
.WPROT	equ	0F8h
.UFORM	equ	0F7h
.SEEK	equ	0F3h
.IFORM	equ	0F0h
.IDEVL	equ	0B5h
.IPARM	equ	08Bh
;-----------------------------------------------------------------------------
;
; Routines available on kernel page 0
;

;* Get in A the current slot for page 1. Corrupts F.
;  Must be called by using CALBNK to bank 0:
;  xor a
;  ld ix,GSLOT1
;  call CALBNK

GSLOT1	equ	402Dh


;* This routine reads a byte from another bank.
;  Must be called by using CALBNK to the desired bank,
;  passing the address to be read in HL:
;  ld a,bank
;  ld hl,address
;  ld ix,RDBANK
;  call CALBNK

RDBANK	equ	403Ch


;* This routine temporarily switches kernel bank 0/3,
;  then jumps to CALBAS in MSX BIOS.
;  This is necessary so that kernel bank is correct in case of BASIC error.

CALBAS	equ	403Fh


;* Call a routine in another bank.
;  Must be used if the driver spawns across more than one bank.
;  Input: A = bank
;         IX = routine address
;         AF' = AF for the routine
;         BC, DE, HL, IY = input for the routine

CALBNK	equ	4042h


;* Get in IX the address of the SLTWRK entry for the slot passed in A,
;  which will in turn contain a pointer to the allocated page 3
;  work area for that slot (0 if no work area was allocated).
;  If A=0, then it uses the slot currently switched in page 1.
;  Returns A=current slot for page 1, if A=0 was passed.
;  Corrupts F.
;  Must be called by using CALBNK to bank 0:
;  ld a,slot
;  ex af,af'
;  xor a
;  ld ix,GWORK
;  call CALBNK

GWORK	equ	4045h


;* Call a routine in the driver bank.
;  Input: (BK4_ADD) = routine address
;         AF, BC, DE, HL, IY = input for the routine
;
; Calls a routine in the driver bank. This routine is the same as CALBNK,
; except that the routine address is passed in address BK4_ADD (#F2ED)
; instead of IX, and the bank number is always 5. This is useful when used
; in combination with CALSLT to call a driver routine from outside
; the driver itself.
;
; Note that register IX can't be used as input parameter, it is
; corrupted before reaching the invoked code.

CALDRV	equ	4048h


;-----------------------------------------------------------------------------
;
; Driver signature
;
	db	"NEXTOR_DRIVER",0

; Driver flags:
;    bit 0: 0 for drive-based, 1 for device-based
;    bit 1: 1 for hot-plug devices supported (device-based drivers only)
;    bit 2: 1 if the driver provides configuration
;             (implements the DRV_CONFIG routine)

	db 1+(2*DRV_HOTPLUG)

;Reserved byte
	db	0

;Driver name

DRV_NAME:
	db	"WonderTANG! uSD Driver"
	ds	32-($-DRV_NAME)," "

;Jump table

	jp	DRV_TIMI
	jp	DRV_VERSION
	jp	DRV_INIT
	jp	DRV_BASSTAT
	jp	DRV_BASDEV
    jp  DRV_EXTBIO
    jp  DRV_DIRECT0
    jp  DRV_DIRECT1
    jp  DRV_DIRECT2
    jp  DRV_DIRECT3
    jp  DRV_DIRECT4
    ;jp  DRV_CONFIG

	ds	15

	jp	DEV_RW
	jp	DEV_INFO
	jp	DEV_STATUS
	jp	LUN_INFO
	jp	DEV_FORMAT
	jp	DEV_CMD


;-----------------------------------------------------------------------------
;
; Timer interrupt routine, it will be called on each timer interrupt
; (at 50 or 60Hz), but only if DRV_INIT returns Cy=1 on its first execution.

DRV_TIMI:
	ret


;-----------------------------------------------------------------------------
;
; Driver initialization, it is called twice:
;
; 1) First execution, for information gathering.
;    Input:
;      A = 0
;      B = number of available drives (drive-based drivers only)
;      HL = maximum size of allocatable work area in page 3
;    Output:
;      A = number of required drives (for drive-based driver only)
;      HL = size of required work area in page 3
;      Cy = 1 if DRV_TIMI must be hooked to the timer interrupt, 0 otherwise
;
; 2) Second execution, for work area and hardware initialization.
;    Input:
;      A = 1
;      B = number of allocated drives for this controller
;          (255 if device-based driver, unless 4 is pressed at boot)
;
;    The work area address can be obtained by using GWORK.
;
;    If first execution requests more work area than available,
;    second execution will not be done and DRV_TIMI will not be hooked
;    to the timer interrupt.
;
;    If first execution requests more drives than available,
;    as many drives as possible will be allocated, and the initialization
;    procedure will continue the normal way
;    (for drive-based drivers only. Device-based drivers always
;     get two allocated drives.)

DRV_INIT:
	;--- If first execution, just inform that no work area is needed
	;    (the 8 bytes in SLTWRK are enough)

	or		a
	ld		hl,0
	ld		a,0
	ret		z			;Note that Cy is 0 (no interrupt hooking needed)

	ld		a,(MSXVER)
	cp		1			; > MSX 2
	jr		c,MSX1
	ld		a,80
	jr		SETSCRN
MSX1:
	ld		a,40
SETSCRN:
	ld		(LINL40),a
	call	INITXT

	ld		de,INFO_S
	call	PRINT

	ld		de,SEARCH_S
	call	PRINT

	call	MY_GWORK
	call	SDC_ON
	ld 		a,SDC_INIT
	ld		(SDC_CMD),a

	ld		(ix),0		; clear device data

WAIT_RESET:
	ld      de,2047			;Timeout 
WAIT_RESET1:
	ld      a,0
	cp      e
	jr      nz,WAIT_DOT		;Print dots while waiting
;	ld      a,46
;	call    CHPUT
WAIT_DOT:
	call	CHECK_ESC
	jp		c,INIT_NO_DEV
	ld      b,255
WAIT_RESET2:
	ld      a,(SDC_STATUS)
	and     SDC_BUSY
	jr      z,WAIT_RESET_END        ;Wait for BSY to clear and DRDY to set          
	djnz    WAIT_RESET2
	dec     de
	ld      a,d
	or      e
	jr      nz,WAIT_RESET1
	jp      INIT_NO_DEV
WAIT_RESET_END:

	ld		a,(SDC_CTYPE)
	or		a
	jp		z,INIT_NO_DEV

	ld		de,SDV1
	cp		1
	jr		z,PRINT_CTYPE
	ld		de,SDV2
	cp		2
	jr		z,PRINT_CTYPE
	ld		de,SDHCV2
	cp		3
	jr		z,PRINT_CTYPE
	ld		de,UNKNOWN

PRINT_CTYPE:					; print card type
	call	PRINT

	ld		de,CRLF_S
    call    PRINT

	ld		hl,SDC_C_SIZE
	ld		e,(hl)
	inc		hl
	ld		d,(hl)
	inc 	hl
	ld		c,(hl)		; c:de = c_size
	inc		hl

	ld		hl,1
	add		hl,de
	ex		de,hl

	ld		a,0
	adc		a,c			; c:de = c_size + 1
	ld		c,a
	jr		nc,NO_OVL
	ld		a,1			; overflow
	jr		OVL
NO_OVL:
	xor		a
OVL:

	ex		af,af'	; preserve msb
	push	af

	ld		hl,SDC_C_SIZE_MULT
	ld		b,(hl)	; b = c_size_mult
	inc		hl
	inc		b
	inc		b		; b = c_size_mult + 2

	ld		a,(hl)  ; a = read_bl_len

	add		a,b
	sub     9
	jr		z,NO_SHIFT
	ld		b,a		; b = read_bl_len + c_size_mult + 2 - 9

	pop		af
	ex		af,af'  ; restore msb
CALC_SIZE:
	sla		e
	rl		d
	rl		c
	rl		a
	djnz	CALC_SIZE
	jr		ST_SIZE
NO_SHIFT:
	pop		af
	ex		af,af'  ; restore msb

ST_SIZE:

	ld		(ix+0),e	; store card size in sectors (512 bytes) in work area (32-bit)
	ld		(ix+1),d
	ld		(ix+2),c
	ld		(ix+3),a

	ld		de,CRLF_S
    call    PRINT

;;;;

	; wait some time
	ld		b,0
outer:
	push	bc
	ld		b,0
inner:
	nop
	push	ix
	pop		ix
	djnz	inner
	pop		bc
	djnz	outer


	jr	DRV_INIT_END

INIT_NO_DEV:
	call	CHECK_ESC
	jr		c,INIT_NO_DEV

	ld      de,CRLF_S
    call    PRINT
	ld		de,NODEVS_S
	call	PRINT
	
	xor		a
	ld		(ix+0),a
	ld		(ix+1),a
	ld		(ix+2),a
	ld		(ix+3),a

	;--- End of the initialization procedure
DRV_INIT_END:
	;;;;;;;;;;;;;;;;;;;
; 	ld      de,CRLF_S
;     call    PRINT
; 	ld      de,CRLF_S
;     call    PRINT
; 	xor 	a
; 	ld		(ix+4),a
; 	ld		(ix+5),a
; 	ld		(ix+6),a
; 	ld		(ix+7),a


; next_sect:
; 	ld		b,0
; 	ld		a,(ix+4)
; 	ld		(SDC_SADDR+0),a
; 	add		1						; increment sector
; 	ld		(ix+4),a				; store back incremented
; 	ld		a,(ix+5)
; 	ld		(SDC_SADDR+1),a
; 	adc		b
; 	ld		(ix+5),a
; 	ld		a,(ix+6)
; 	ld		(SDC_SADDR+2),a
; 	adc		b
; 	ld		(ix+6),a
; 	ld		a,(ix+7)
; 	ld		(SDC_SADDR+3),a
; 	adc		b
; 	ld		(ix+7),a
; 	ld		a,SDC_READ
; 	ld		(SDC_CMD),a
; 	call	WAIT_CMD_RDY

; 	ld		hl,SDC_SDATA			; src data
	
; 	ld		b,19
; lines:
; 	push	bc
; 	ld		b,26
; rows:
; 	ld		a,(hl)
; 	inc		hl
; 	call	HEXPUT
; 	ld		a,' '
; 	call	CHPUT
; 	djnz	rows
; 	ld      de,CRLF_S
;     call    PRINT
; 	pop		bc
; 	djnz	lines	
; 	ld		b,18
; lastrow:
; 	ld		a,(hl)
; 	inc		hl
; 	call	HEXPUT
; 	ld		a,' '
; 	call	CHPUT
; 	djnz	lastrow
; 	ld      de,CRLF_S
;     call    PRINT
; 	call	CHGET
; 	cp		27
; 	jp		nz,next_sect
;-----------------------------------------------------------------------------
;
; Read or write logical sectors from/to a logical unit
;
;Input:    Cy=0 to read, 1 to write
;          A = Device number, 1 to 7
;          B = Number of sectors to read or write
;          C = Logical unit number, 1 to 7
;          HL = Source or destination memory address for the transfer
;          DE = Address where the 4 byte sector number is stored
;Output:   A = Error code (the same codes of MSX-DOS are used):

	;;;;;;;;;;;;;;;;;

	call	SDC_OFF
	ret

; HEXPUT:
; 	push 	af
; 	push	bc
; 	ld		b,a
; 	srl 	a
; 	srl 	a
; 	srl 	a
; 	srl 	a
; 	call	HEXCHAR
; 	ld		a,b
; 	and		00fh
; 	call	HEXCHAR
; 	pop		bc
; 	pop		af
; 	ret

; HEXCHAR:
; 	cp		10
; 	jr		c,digit
; 	add		'A'-10
; 	jp		CHPUT
; digit:
; 	add		'0'
; 	jp		CHPUT


BINTOHEX:
	ld		c,a
	srl 	a
	srl 	a
	srl 	a
	srl 	a
	call	HEXNIBLE
	ld		b,a
	ld		a,c
	and		00fh
	call	HEXNIBLE
	ld		c,a
	ret
HEXNIBLE:
	cp		10
	jr		c,ISDIGT
	add		'A'-10
	ret
ISDIGT:
	add		'0'
	ret

;-----------------------------------------------------------------------------
;
; Obtain driver version
;
; Input:  -
; Output: A = Main version number
;         B = Secondary version number
;         C = Revision number

DRV_VERSION:
	ld	a,VER_MAIN
	ld	b,VER_SEC
	ld	c,VER_REV
	ret


;-----------------------------------------------------------------------------
;
; BASIC expanded statement ("CALL") handler.
; Works the expected way, except that CALBAS in kernel page 0
; must be called instead of CALBAS in MSX BIOS.

DRV_BASSTAT:
	scf
	ret


;-----------------------------------------------------------------------------
;
; BASIC expanded device handler.
; Works the expected way, except that CALBAS in kernel page 0
; must be called instead of CALBAS in MSX BIOS.

DRV_BASDEV:
	scf
	ret


;-----------------------------------------------------------------------------
;
; Extended BIOS hook.
; Works the expected way, except that it must return
; D'=1 if the old hook must be called, D'=0 otherwise.
; It is entered with D'=1.

DRV_EXTBIO:
	ret


;-----------------------------------------------------------------------------
;
; Direct calls entry points.
; Calls to addresses 7450h, 7453h, 7456h, 7459h and 745Ch
; in kernel banks 0 and 3 will be redirected
; to DIRECT0/1/2/3/4 respectively.
; Receives all register data from the caller except IX and AF'.

DRV_DIRECT0:
DRV_DIRECT1:
DRV_DIRECT2:
DRV_DIRECT3:
DRV_DIRECT4:
	ret


;-----------------------------------------------------------------------------
;
; Get driver configuration
;
; Input:
;   A = Configuration index
;   BC, DE, HL = Depends on the configuration
;
; Output:
;   A = 0: Ok
;       1: Configuration not available for the supplied index
;   BC, DE, HL = Depends on the configuration
;
; * Get number of drives at boot time (for device-based drivers only):
;   Input:
;     A = 1
;     B = 0 for DOS 2 mode, 1 for DOS 1 mode
;   Output:
;     B = number of drives
;
; * Get default configuration for drive
;   Input:
;     A = 2
;     B = 0 for DOS 2 mode, 1 for DOS 1 mode
;     C = Relative drive number at boot time
;   Output:
;     B = Device index
;     C = LUN index

; DRV_CONFIG:
;     ld a,1
;     ret

;=====
;=====  BEGIN of DEVICE-BASED specific routines
;=====

;-----------------------------------------------------------------------------
;
; Read or write logical sectors from/to a logical unit
;
;Input:    Cy=0 to read, 1 to write
;          A = Device number, 1 to 7
;          B = Number of sectors to read or write
;          C = Logical unit number, 1 to 7
;          HL = Source or destination memory address for the transfer
;          DE = Address where the 4 byte sector number is stored
;Output:   A = Error code (the same codes of MSX-DOS are used):
;              0: Ok
;              .IDEVL: Invalid device or LUN
;              .NRDY: Not ready
;              .DISK: General unknown disk error
;              .DATA: CRC error when reading
;              .RNF: Sector not found
;              .UFORM: Unformatted disk
;              .WPROT: Write protected media, or read-only logical unit
;              .WRERR: Write error
;              .NCOMP: Incompatible disk
;              .SEEK: Seek error
;          B = Number of sectors actually read/written

DEV_RW:
	jp		c,WRSECT
RDSECT:

	or		a	;Check device index
	jp		z,RW_ERR1
	cp		2
	jp		nc,RW_ERR1

	call	MY_GWORK

	call	SDC_ON
	call	WAIT_CMD_RDY
	ld		a,(SDC_STATUS)
	and		SDC_BUSY
	jp		nz,RW_BUSY

	ld		a,(de)
	inc		de
	ld		(ix+4),a
	ld		a,(de)
	inc		de
	ld		(ix+5),a
	ld		a,(de)
	inc		de
	ld		(ix+6),a
	ld		a,(de)
	inc		de
	ld		(ix+7),a				; current sector

	ex		de,hl					; de = destination
	push	bc						; nr of sectors

RD_LOOP:
	push	bc						; nr of sectors
	ld		b,0
	ld		a,(ix+4)
	ld		(SDC_SADDR+0),a
	add		1						; increment sector
	ld		(ix+4),a				; store back incremented
	ld		a,(ix+5)
	ld		(SDC_SADDR+1),a
	adc		b
	ld		(ix+5),a
	ld		a,(ix+6)
	ld		(SDC_SADDR+2),a
	adc		b
	ld		(ix+6),a
	ld		a,(ix+7)
	ld		(SDC_SADDR+3),a
	adc		b
	ld		(ix+7),a
	ld		a,SDC_READ
	ld		(SDC_CMD),a
	call	WAIT_CMD_RDY
	jr		c,R_ERR_LOOP
	ld		bc,512
	ld		hl,SDC_SDATA			; src data
	ldir
	pop		bc
	djnz	RD_LOOP
	pop		bc						; nr of sectors
	call	SDC_OFF

	ld		a,0
	or		a
	ret


R_ERR_LOOP:
	ld		a,(SDC_STATUS)
	ld		e,a						; save stat
	call	SDC_OFF
	pop		bc
	ld		d,b
	pop		bc
	ld		a,d
	sub		b
	ld		b,a						; sectors written
	ld		e,a
	and		SDC_TIMEOUT
	jr		nz,R_TIMEOUT
	ld		a,.DISK
	scf
	ret
R_TIMEOUT:
	ld		a,.NRDY
	scf
	ret

W_ERR_LOOP:
	ld		a,(SDC_STATUS)
	ld		e,a						; save stat
	call	SDC_OFF
	pop		bc
	ld		d,b
	pop		bc
	ld		a,d
	sub		b
	ld		b,a						; sectors written
	ld		e,a
	and		SDC_CRC
	jr		nz,W_WRERR
	ld		a,.DISK
	scf
	ret
W_WRERR:

	;ld		a,0f3h
	;call	SETBORDER

	ld		a,.WRERR
	scf
	ret

RW_DISK:

	;ld		a,0fDh
	;call	SETBORDER

	ld		b,.DISK
	jr		RW_ERR
RW_BUSY:

	;ld		a,0f5h
	;call	SETBORDER

	ld		b,.NRDY
	jr		RW_ERR
RW_ERR1:

	;ld		a,0f7h
	;call	SETBORDER

	ld		b,.IDEVL
RW_ERR:

	;ld		a,0feh
	;call	SETBORDER

	call	SDC_OFF
	ld		a,b
	ld		b,0
	scf
	ret

WRSECT:
	or		a	;Check device index
	jr		z,RW_ERR1
	cp		2
	jr		nc,RW_ERR1

	call	MY_GWORK

	call	SDC_ON
	call	WAIT_CMD_RDY
	ld		a,(SDC_STATUS)
	and		SDC_BUSY
	jr		nz,RW_BUSY

	ld		a,(de)
	inc		de
	ld		(ix+4),a
	ld		a,(de)
	inc		de
	ld		(ix+5),a
	ld		a,(de)
	inc		de
	ld		(ix+6),a
	ld		a,(de)
	inc		de
	ld		(ix+7),a				; current sector

	push	bc						; nr of sectors

WR_LOOP:
	push	bc						; nr of sectors
	ld		b,0
	ld		a,(ix+4)
	ld		(SDC_SADDR+0),a
	add		1						; increment sector
	ld		(ix+4),a
	ld		a,(ix+5)
	ld		(SDC_SADDR+1),a
	adc		b
	ld		(ix+5),a
	ld		a,(ix+6)
	ld		(SDC_SADDR+2),a
	adc		b
	ld		(ix+6),a
	ld		a,(ix+7)
	ld		(SDC_SADDR+3),a
	adc		b
	ld		(ix+7),a

	ld		bc,512
	ld		de,SDC_SDATA			; hl = src data
	ldir

	ld		a,SDC_WRITE
	ld		(SDC_CMD),a
	call	WAIT_CMD_RDY
	jp		c,W_ERR_LOOP

	pop		bc
	djnz	WR_LOOP
	pop		bc						; nr of sectors
	call	SDC_OFF

	ld		a,0
	or		a
	ret




;-----------------------------------------------------------------------------
;
; Device information gathering
;
;Input:   A = Device index, 1 to 7
;         B = Information to return:
;             0: Basic information
;             1: Manufacturer name string
;             2: Device name string
;             3: Serial number string
;         HL = Pointer to a buffer in RAM
;Output:  A = Error code:
;             0: Ok
;             1: Device not available or invalid device index
;             2: Information not available, or invalid information index
;         When basic information is requested,
;         buffer filled with the following information:
;
;+0 (1): Numer of logical units, from 1 to 8. 1 if the device has no logical
;        drives (which is functionally equivalent to having only one).
;+1 (1): Flags, always zero
;
; The strings must be printable ASCII string (ASCII codes 32 to 126),
; left justified and padded with spaces. All the strings are optional,
; if not available, an error must be returned.
; If a string is provided by the device in binary format, it must be reported
; as an hexadecimal, upper-cased string, preceded by the prefix "0x".
; The maximum length for a string is 64 characters;
; if the string is actually longer, the leftmost 64 characters
; should be provided.
;
; In the case of the serial number string, the same rules for the strings
; apply, except that it must be provided right-justified,
; and if it is too long, the rightmost characters must be
; provided, not the leftmost.

DEV_INFO:

	or		a	;Check device index
	jr		z,DEV_INFO_ERR1
	cp		2
	jr		nc,DEV_INFO_ERR1

	call	MY_GWORK

	call	SDC_ON

	ld		a,b
	or		a
	jr		z,BASIC_INFO
	cp		1
	jr		z,MANUFACTURER
	cp		2
	jr		z,DEVICE_NAME
	cp		3
	jr		z,SERIAL_NUMBER

MANUFACTURER:
DEV_INFO_ERR2:
	call	SDC_OFF
	ld	a,2
	ret

BASIC_INFO:

	ld		a,1
	ld		(hl),a
	inc		hl
	xor		a
	ld		(hl),a
DEV_INFO_OK:
	xor		a
	call	SDC_OFF
	ret

DEVICE_NAME:
	ex		de,hl
	ld		hl,SDC_OID
	ld		b,7
COPNAME:
	ld		a,(hl)
	cp		32
	jr		c,NONASC
	or		128
	jr		nz,NONASC
	jr		STORASC
NONASC:
	ld		a,' '
STORASC:
	ld		(de),a
	inc		de
	inc		hl
	djnz	COPNAME
	ex		de,hl
	ld		b,64-7
STR_PAD:
	ld		a,' '
	ld		(hl),a
	inc		hl
	djnz	STR_PAD

	jr		DEV_INFO_OK

SERIAL_NUMBER:

	ld		de,SDC_PSN+3
	ld		a,(de)
	dec		de
	call	BINTOHEX
	ld		(hl),b
	inc		hl
	ld		(hl),c
	inc		hl
	ld		a,(de)
	dec		de
	call	BINTOHEX
	ld		(hl),b
	inc		hl
	ld		(hl),c
	inc		hl	
	ld		a,(de)
	dec		de
	call	BINTOHEX
	ld		(hl),b
	inc		hl
	ld		(hl),c
	inc		hl
	ld		a,(de)
	dec		de
	call	BINTOHEX
	ld		(hl),b
	inc		hl
	ld		(hl),c
	inc		hl
	ld		b,64-8
	jr		STR_PAD		
	;--- Termination with error

DEV_INFO_ERR1:
	call	SDC_OFF
	ld		a,1
	ret



;-----------------------------------------------------------------------------
;
; Obtain device status
;
;Input:   A = Device index, 1 to 7
;         B = Logical unit number, 1 to 7.
;             0 to return the status of the device itself.
;Output:  A = Status for the specified logical unit,
;             or for the whole device if 0 was specified:
;                0: The device or logical unit is not available, or the
;                   device or logical unit number supplied is invalid.
;                1: The device or logical unit is available and has not
;                   changed since the last status request.
;                2: The device or logical unit is available and has changed
;                   since the last status request
;                   (for devices, the device has been unplugged and a
;                    different device has been plugged which has been
;                    assigned the same device index; for logical units,
;                    the media has been changed).
;                3: The device or logical unit is available, but it is not
;                   possible to determine whether it has been changed
;                   or not since the last status request.
;
; Devices not supporting hot-plugging must always return status value 1.
; Non removable logical units may return values 0 and 1.

DEV_STATUS:
	call	CHECK_DEV_LUN
	jr		c,DEV_STAT_ERR

	ld		a,(ix+0)
	or		a
	jr		nz,DEV_OK
	ld		a,(ix+1)
	or		a
	jr		nz,DEV_OK
	ld		a,(ix+2)
	or		a
	jr		nz,DEV_OK
	ld		a,(ix+3)
	or		a
	jr		nz,DEV_OK
DEV_STAT_ERR:
	ld		a,0
	ret

DEV_OK:
	ld		a,1
	ret

;-----------------------------------------------------------------------------
;
; Obtain logical unit information
;
;Input:   A  = Device index, 1 to 7.
;         B  = Logical unit number, 1 to 7.
;         HL = Pointer to buffer in RAM.
;Output:  A = 0: Ok, buffer filled with information.
;             1: Error, device or logical unit not available,
;                or device index or logical unit number invalid.
;         On success, buffer filled with the following information:
;
;+0 (1): Medium type:
;        0: Block device
;        1: CD or DVD reader or recorder
;        2-254: Unused. Additional codes may be defined in the future.
;        255: Other
;+1 (2): Sector size, 0 if this information does not apply or is
;        not available.
;+3 (4): Total number of available sectors.
;        0 if this information does not apply or is not available.
;+7 (1): Flags:
;        bit 0: 1 if the medium is removable.
;        bit 1: 1 if the medium is read only. A medium that can dinamically
;               be write protected or write enabled is not considered
;               to be read-only.
;        bit 2: 1 if the LUN is a floppy disk drive.
;+8 (2): Number of cylinders (0, if not a hard disk)
;+10 (1): Number of heads (0, if not a hard disk)
;+11 (1): Number of sectors per track (0, if not a hard disk)

LUN_INFO:

	call	CHECK_DEV_LUN
	jr		c,LUN_INFO_ERROR

	call	MY_GWORK

	xor		a
	ld		(hl), a ; block device
	inc		hl
	ld		(hl),0
	inc		hl
	ld		(hl),2	; sector size
	inc		hl
	ld		a,(ix+0)
	ld		(hl),a
	inc		hl
	ld		a,(ix+1)
	ld		(hl),a
	inc		hl
	ld		a,(ix+2)
	ld		(hl),a
	inc		hl
	ld		a,(ix+3)
	ld		(hl),a	; total of sectors
	inc		hl
	xor		a
	ld		(hl),a  ; medium flags
	inc		hl
	ld		(hl),a   ; 
	inc		hl
	ld		(hl),a   ; num of cyls
	inc		hl
	ld		(hl),a   ; num of heads
	inc		hl
	ld		(hl),a   ; num of sectors per track 

	xor		a
	ret

LUN_INFO_ERROR:
	ld		a,1
	ret


;-----------------------------------------------------------------------------
;
; Physical format a device
;
;Input:   A = Device index, 1 to 7
;         B = Logical unit number, 1 to 7
;         C = Format choice, 0 to return choice string
;Output:
;        When C=0 at input:
;        A = 0: Ok, address of choice string returned
;            .IFORM: Invalid device or logical unit number,
;                    or device not formattable
;        HL = Address of format choice string (in bank 0 or 3),
;             only if A=0 returned.
;             Zero, if only one choice is available.
;
;        When C<>0 at input:
;        A = 0: Ok, device formatted
;            Other: error code, same as DEV_RW plus:
;            .IPARM: Invalid format choice
;            .IFORM: Invalid device or logical unit number,
;                    or device not formattable
;        B = Media ID if the device is a floppy disk, zero otherwise
;            (only if A=0 is returned)
;
; Media IDs are:
; F0h: 3.5" Double Sided, 80 tracks per side, 18 sectors per track (1.44MB)
; F8h: 3.5" Single sided, 80 tracks per side, 9 sectors per track (360K)
; F9h: 3.5" Double sided, 80 tracks per side, 9 sectors per track (720K)
; FAh: 5.25" Single sided, 80 tracks per side, 8 sectors per track (320K)
; FBh: 3.5" Double sided, 80 tracks per side, 8 sectors per track (640K)
; FCh: 5.25" Single sided, 40 tracks per side, 9 sectors per track (180K)
; FDh: 5.25" Double sided, 40 tracks per side, 9 sectors per track (360K)
; FEh: 5.25" Single sided, 40 tracks per side, 8 sectors per track (160K)
; FFh: 5.25" Double sided, 40 tracks per side, 8 sectors per track (320K)

DEV_FORMAT:
	ld	a,.IFORM
	ret


;-----------------------------------------------------------------------------
;
; Execute direct command on a device
;
;Input:    A = Device number, 1 to 7
;          B = Logical unit number, 1 to 7 (if applicable)
;          HL = Address of input buffer
;          DE = Address of output buffer, 0 if not necessary
;Output:   Output buffer appropriately filled (if applicable)
;          A = Error code:
;              0: Ok
;              1: Invalid device number or logical unit number,
;                 or device not ready
;              2: Invalid or unknown command
;              3: Insufficient output buffer space
;              4-15: Reserved
;              16-255: Device specific error codes
;
; The first two bytes of the input and output buffers must contain the size
; of the buffer, not incuding the size bytes themselves.
; For example, if 16 bytes are needed for a buffer, then 18 bytes must
; be allocated, and the first two bytes of the buffer must be 16, 0.

DEV_CMD:
	ld	a,2
	ret

;=====
;=====  END of DEVICE-BASED specific routines
;=====


;=======================
; Subroutines
;=======================

;-----------------------------------------------------------------------------
;
; Enable or disable the SPI registers

SDC_ON:
	ld		a,1
	ld		(SDC_ENABLE),a
	ret

SDC_OFF:
	xor		a
	ld		(SDC_ENABLE),a
	ret

;-----------------------------------------------------------------------------
;
; Wait the BSY flag to clear and RDY flag to be set
; if we wait for more than 30s, send a soft reset to IDE BUS
; if the soft reset didn't work after 30s return with error
;
; Input:  Nothing
; Output: Cy=1 if timeout after soft reset 
; Preserves: DE and BC

WAIT_CMD_RDY:
	push	de
	push	bc
	ld		de,2047 ;8142		;Limit the wait to 30s
WAIT_RDY1:
	ld		b,255
WAIT_RDY2:
	ld		a,(SDC_STATUS)
	and		SDC_BUSY+SDC_TIMEOUT+SDC_CRC
	or		a
	jr		z,WAIT_RDY_END	
	djnz	WAIT_RDY2	
	dec		de
	ld		a,d
	or		e
	jr		nz,WAIT_RDY1
	scf
WAIT_RDY_END:
	pop	bc
	pop	de
	ret	
	
;-----------------------------------------------------------------------------
;
; Read the keyboard matrix to see if ESC is pressed
; Output: Cy = 1 if pressed, 0 otherwise

CHECK_ESC:
	ld	b,7
	in	a,(0AAh)
	and	11110000b
	or	b
	out	(0AAh),a
	in	a,(0A9h)	
	bit	2,a
	jr	nz,CHECK_ESC_END
	scf
CHECK_ESC_END:
	ret




;-----------------------------------------------------------------------------
;
; Print a zero-terminated string on screen
; Input: DE = String address

PRINT:
	ld	a,(de)
	or	a
	ret	z
	call	CHPUT
	inc	de
	jr	PRINT

;-----------------------------------------------------------------------------
;
; Check the device index and LUN
; Input:  A = device index, B = lun
; Output: Cy=0 if OK, 1 if device or LUN invalid
;         IX = Work area for the device
; Modifies F, C

CHECK_DEV_LUN:
	or	a	;Check device index
	scf
	ret	z
	cp	2
	ccf
	ret	c

	ld	a,b	;Check LUN number
	cp	1
	scf
	ret	nz

	or	a
	ret


;-----------------------------------------------------------------------------
;
; Obtain the work area address for the driver
; Input: A=1  to obtain the work area for the master, 2 for the slave
; Preserves A

MY_GWORK:
	xor	a
	EX AF,AF'
	XOR A
	LD IX,GWORK
	call CALBNK
	ret

;SETBORDER:
;	out	(099h),a
;	ld	a,087h
;	out	(099h),a
;	ret

;=======================
; Strings
;=======================

INFO_S:
	db	"WonderTANG! v"
	db	VER_MAIN+"0",".",VER_SEC+"0",".",VER_REV+"0",13,10
	db  "Synthetic Juice for your MSX",13,10,13,10
	db	"2023 Luis Antoniosi",13,10
	db  "Beautiful British Columbia",13,10
	db  "Canada",13,10,13,10
	db  "SS0: Nextor BIOS + MicroSD",13,10
	db  "SS1: FM ROM + OPLL",13,10
	db  "SS2: Super MegaRAM SCC+ 2MB",13,10
	db  "SS3: Memory Mapper 4MB",13,10
	db  "---: SMS VDP 16KB ",13,10,13,10,0

SEARCH_S:
	db	"Searching: ",0

NODEVS_S:
	db	"Not found",13,10,0

UNKNOWN:
	db  "UNKOWN",0
SDV1:
	db  "SDV1",0
SDV2:
	db  "SDV2",0
SDHCV2:
	db  "SDHCV2",0

CRLF_S:
	db	13,10,0


;-----------------------------------------------------------------------------
;
; Padding up to the required driver size

DRV_END:

	ds	3ED0h-(DRV_END-DRV_START)

	end
